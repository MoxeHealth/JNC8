/* global meds */

var algorithm = {};

//all options and methods are properties of algorithm object for encapsulation purposes, and also so that any part of the algorithm's options or methods can be tested in isolation

//algorithm based on JNC8 HTN treatment guidelines 

algorithm.opts = {
  meds: meds,
  statuses: {
    good: "Good",
    ok: "Okay",
    bad: "Danger"
  },
  recMessages: {
    continueTreatment: "Continue current treatment and monitoring.",
    
    titrationStrategies: {
      a: "Maximize first medication before adding second.",
      b: "Add second medication before reaching maximum dose of first medication.",
      c: "Start with two medication classes, separately or as fixed-dose combination."
    },
    firstVisit: {
      nonBlackNoCKD: "Initiate thiazide-type diuretic or ACEI or ARB or CCB, alone or in combination. ACEIs and ARBs should not be used in combination.",
      blackNoCKD: "Initiate thiazide-type diuretic or CCB, alone or in combination.",
      CKD: "Initiate ACEI or ARB, alone or in combination with other drug class. ACEIs and ARBs should not be used in combination."
    },
    allFollowUpVisits: "Reinforce  medication and lifestyle adherence.",
    followUpVisitMaxNotReached: "Max dose of current medication not reached; titrate current medication.",
    followUpVisitMaxReached: "Current medication is at maximum recommended dose. Add and titrate a medication from one of the following additional medication classes:",
    referralVisit: "Add additional medication class(eg, &#914;-blocker, aldosterone antagonist, or others) and/or refer to physician with expertise in hypertension management."
    //the following messages are commented out for now because we're assuming only titration strategy
    //A will be used. May use these messages in the future because they are copied directly from JNC8 algorithm: 
    // allFollowUpVisits: "Reinforce medication and lifestyle adherence.",
    // followUp: {
    //   ab: "Add and titrate thiazide-type diuretic or ACEI or ARB or CCB (use medication class not previously selected and avoid combined use of ACEI and ARB).",
    //   c: "Titrate doses of initial medication to maximum."
    // },
    // followUpTwoMeds: "Add and titrate thiazide-type diuretic or ACEI or ARB or CCB (use medication class not previously selected and avoid combined use of ACEI and ARB).",
    // followUpThreeMeds: "Add additional medication class(eg, &#914;-blocker, aldosterone antagonist, or others) and/or refer to physician with expertise in hypertension management."
  },
  //to make any refactoring to numeric code or another race string easier 
  races: {
    black: "Black or African American"
  }
};

algorithm.methods = {

  //currently algorithm assumes that doctor will determine max dose of each medication (boolean value)
  //and that doctor will only use titration strategy A 
  //3 possible algorithm.opts.statuses: 'bad', 'ok', 'good'

  //todo - refactor to 'algorithmData' to differentiate from 'algorithm service'
  //todo - refactor pt so that it grabs the correct data from the database
  /*bloodPressure: {[  
    { 
      systolic: {
        value: "120",
        encounterId: {
          $id: "84"
        }
      },
      diastolic: {
        value: "60",
        encounterId: {
          $id: "84"
        }
      }
    },
    {
     ...
    }
  ]}
  */

  runAlgorithm: function(pt){
    var algoResults = {};
    pt.curTargetBP = algorithm.methods.generateTarget(pt);
    algoResults.recs = algorithm.methods.generateRecs(pt, pt.curTargetBP);

    return algoResults; 
  },

  //input - patient object
  //output - object with two keys, systolic and diastolic, whose values are integers
  generateTarget: function(pt) {
    if(pt.curTargetBP){
      return pt.curTargetBP;
    }else{
      if(pt.age >= 18){
        // set curTargetBP by age and diabetes/CKD logic
        if(!pt.hasDiabetes && !pt.hasCKD && pt.age >= 60) {
          console.log('curTargetBP for people >60 with no diabetes or CKD');
          return {
            systolic: 150,
            diastolic: 90
          };
        }else{
          console.log('other curTargetBP');
          return {
            systolic: 140,
            diastolic: 90
          };
        }
      }else{
        console.warn("Patient is under 18.");
        return;
      }
    }
  },

  //input - patient object
  //output - object with two keys, 1) a recommendation string and 2) an object containing the recommendation medication classes 
  generateRecs: function(pt, curTargetBP){

    //patient will either use curTargetBP from a previous encounter, or curTargetBP generated by generateTarget method
    pt.curTargetBP = pt.curTargetBP || curTargetBP;
    console.log('curTarget', pt.curTargetBP);

    var drugsatMax = function(curMeds){
      var allDrugsatMax = true;
      for (var i = 0; i < curMeds.length; i++) {
        if(!curMeds[i].atMax){
          allDrugsatMax = false;
        }
      }
      return allDrugsatMax;
    };

    if(algorithm.methods.isAtBPGoal(pt)) {
      return {
        recStatus: algorithm.opts.statuses.good,
        recMsg: algorithm.opts.recMessages.continueTreatment,
        medRecs: [] 
      };
    }else{
      //first time patient is prescribed medication; assumed to be first visit
      if(!pt.curMeds.length){
        if(!pt.hasCKD) {
          if(pt.race !== algorithm.opts.races.black) {
            return {
              recStatus: algorithm.opts.statuses.bad,
              recMsg: algorithm.opts.recMessages.firstVisit.nonBlackNoCKD,
              medRecs: meds.combos.firstVisit.nonBlackNoCKD
            };
          } else if(pt.race === "Black or African American") {
            return {
              recStatus: algorithm.opts.statuses.bad,
              recMsg: algorithm.opts.recMessages.firstVisit.blackNoCKD,
              medRecs: meds.combos.firstVisit.blackNoCKD
            };
          }
        } else if(pt.hasCKD) {
          return {
            recStatus: algorithm.opts.statuses.bad,
            recMsg: algorithm.opts.recMessages.firstVisit.CKD,
            medRecs: meds.combos.firstVisit.CKD
          };
        }
      }else{
        // all follow up visits
        if(drugsatMax(pt.curMeds)){
          if(pt.curMeds.length === 3){
            return {
              recStatus: algorithm.opts.statuses.bad,
              recMsg: algorithm.opts.recMessages.allFollowUpVisits + ' ' + algorithm.opts.recMessages.referralVisit,
              medRecs: meds.allMeds.Others
            };
          }
          return {
            recStatus: algorithm.opts.statuses.bad,
            recMsg: algorithm.opts.recMessages.allFollowUpVisits + ' ' + algorithm.opts.recMessages.followUpVisitMaxReached,
            medRecs: algorithm.methods.chooseNextMeds(pt.curMeds)
          };
        }else{
          return {
            recStatus: algorithm.opts.statuses.bad,
            recMsg: algorithm.opts.recMessages.allFollowUpVisits + ' ' + algorithm.opts.recMessages.followUpVisitMaxNotReached,
            medRecs: []
          };
        }
      }
    }
  },

  //chooseNextMeds is invoked at the end of algorithm.methods.generateRecs to determine which of the medications that haven't been maxed out should be recommended
  //curMeds is an array of objects
  chooseNextMeds: function(curMeds){
    //in runAlgorithm function, curMeds will be defined. Check here is defensive and also for testing. 
    var curMeds = curMeds || [];
    var nextMeds = [];

    //strings here must match keys in meds.allMeds
    var possibleNextMeds = {
      ACEI: true,
      ARB: true,
      CCB: true,
      Thiazide: true
    };

    for (var i = 0; i < curMeds.length; i++) {
      if(curMeds[i].className === 'ACEI' || curMeds[i].className === 'ARB'){
        console.log('acei false');
        possibleNextMeds.ACEI = false;
        possibleNextMeds.ARB = false;
      }
      if(curMeds[i].className === 'CCB'){
        console.log('ccb false');
        possibleNextMeds.CCB = false;
      }
      if(curMeds[i].className === 'Thiazide'){
        console.log('thiazide false');
        possibleNextMeds.Thiazide = false;
      }
    }
    console.log('possible', possibleNextMeds)

    for(var med in possibleNextMeds){
      if(possibleNextMeds[med]){
        var obj = {};
        obj[med] = meds.allMeds[med];
        nextMeds.push({
          className: med,
          meds: meds.allMeds[med]
        });
      }
    }
    return nextMeds;
  },

  //should only be invoked after pt curTargetBP is set 
  isAtBPGoal: function(pt) {
    if(pt.curTargetBP) {
      if(pt.curBP.systolic >= pt.curTargetBP.systolic || pt.curBP.diastolic >= pt.curTargetBP.diastolic) {
        return false;
      }
      return true;
    } else {
      throw new Error ("Patient's target BP hasn't been set.");
    }
  }
};